name: Polybot Deployment

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.2.0

    - name: Initialize Terraform
      run: terraform init
      working-directory: terraform

    - name: Apply Terraform
      run: terraform apply -var-file=main.tfvars -auto-approve
      working-directory: terraform

    - name: Get instance IPs
      id: get-ips
      run: |
        INSTANCE_IPS=$(terraform output -json app_server_instance_ips | jq -r '.[]')
        echo "INSTANCE_IPS=$INSTANCE_IPS" >> $GITHUB_ENV
      working-directory: terraform

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Read .env file
      id: read-env
      run: |
        export $(grep -v '^#' polybot/.env | xargs)
        echo "POLYBOT_IMAGE_NAME=${POLYBOT_IMAGE_NAME}" >> $GITHUB_ENV
        echo "POLYBOT_IMAGE_VERSION=${POLYBOT_IMAGE_VERSION}" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        IMAGE_TAG=${{ env.POLYBOT_IMAGE_NAME }}:${{ env.POLYBOT_IMAGE_VERSION }}
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG
      working-directory: polybot

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to AWS EC2
      run: |
        for IP in ${{ env.INSTANCE_IPS }}; do
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$IP << 'EOF'
          cd /path/to/your/project
          export $(grep -v '^#' polybot/.env | xargs)
          docker-compose pull polybot
          docker-compose up -d
          EOF
        done
